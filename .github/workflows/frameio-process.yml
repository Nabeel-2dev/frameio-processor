name: Frame.io Folder Processor

on:
  repository_dispatch:
    types: [process-folder]

env:
  AIRTABLE_TOKEN: "patqQjUnvTPGwQXms.97e2e59d9d5726b17d0fd43bc59c5077cff8be7e7b1b7b3ec82b2beff0f17fbe"
  AIRTABLE_BASE_ID: "appWU7ZO2ijKsBGf1"
  TABLE_NAME: "Result%20Folders"

jobs:
  process-folder:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Extract Parameters
      id: params
      run: |
        echo "folder_url=${{ github.event.client_payload.folderUrl }}" >> $GITHUB_OUTPUT
        echo "record_id=${{ github.event.client_payload.recordId }}" >> $GITHUB_OUTPUT
        echo "script_url=${{ github.event.client_payload.scriptUrl }}" >> $GITHUB_OUTPUT
        
        echo "📝 Parameters:"
        echo "  Folder: ${{ github.event.client_payload.folderUrl }}"
        echo "  Record: ${{ github.event.client_payload.recordId }}"
        echo "  Script: ${{ github.event.client_payload.scriptUrl }}"

    - name: Process Frame.io Upload
      run: |
        echo "🚀 Starting Frame.io processing..."
        echo "Folder URL: ${{ steps.params.outputs.folder_url }}"
        echo "Record ID: ${{ steps.params.outputs.record_id }}"
        echo "Script URL: ${{ steps.params.outputs.script_url }}"
        
        # Function to call Google Apps Script with retry logic
        call_script() {
          local action=$1
          local params=$2
          local max_attempts=3
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "📞 Calling: $action (attempt $attempt/$max_attempts)"
            
            local response=$(curl -s -L \
              --max-time 300 \
              --retry 2 \
              --retry-delay 5 \
              "$script_url?action=$action$params")
            
            if [ $? -eq 0 ] && [ -n "$response" ]; then
              echo "$response"
              return 0
            fi
            
            echo "🔄 Retrying in 5 seconds..."
            sleep 5
            attempt=$((attempt + 1))
          done
          
          echo "❌ Failed after $max_attempts attempts"
          return 1
        }
        
        local script_url="${{ steps.params.outputs.script_url }}"
        local record_id="${{ steps.params.outputs.record_id }}"
        
        # Step 1: Initialize folder
        echo "📁 Step 1: Initializing folder..."
        init_response=$(call_script "initFolder" "&folderUrl=${{ steps.params.outputs.folder_url }}")
        
        if echo "$init_response" | grep -q '"ok":false'; then
          echo "❌ Init error: $(echo "$init_response" | grep -o '"error":"[^"]*"' | sed 's/"error":"//;s/"//')"
          exit 1
        fi
        
        echo "✅ Files found for processing"
        echo "$init_response"
        
        # Extract group ID
        group_id=$(echo "$init_response" | grep -o '"groupId":"[^"]*"' | sed 's/"groupId":"//;s/"//')
        
        if [ -z "$group_id" ] || [ "$group_id" = "null" ]; then
          echo "ℹ️  No files found for processing"
          exit 0
        fi
        
        echo "🆔 Group ID: $group_id"
        
        # Step 2: Upload assets with proven settings
        echo "📤 Step 2: Starting uploads..."
        while true; do
          upload_response=$(call_script "uploadAsset" "&groupId=$group_id&budget_ms=240000&window=4&pace_ms=500")
          
          echo "Upload response: $upload_response"
          
          # Check if upload is complete
          if echo "$upload_response" | grep -q '"paused":false'; then
            echo "✅ Upload completed!"
            break
          elif echo "$upload_response" | grep -q '"ok":false'; then
            echo "❌ Upload error: $(echo "$upload_response" | grep -o '"error":"[^"]*"' | sed 's/"error":"//;s/"//')"
            exit 1
          else
            echo "⏳ Upload continuing..."
            sleep 5
          fi
        done
        
        # Step 3: Finalize and get review link
        echo "🔗 Step 3: Creating Frame.io review link..."
        finalize_response=$(call_script "finalizeFolder" "&groupId=$group_id")
        
        if echo "$finalize_response" | grep -q '"ok":false'; then
          echo "❌ Finalize error: $(echo "$finalize_response" | grep -o '"error":"[^"]*"' | sed 's/"error":"//;s/"//')"
          exit 1
        fi
        
        echo "✅ Finalization successful!"
        echo "$finalize_response"
        
        # Extract review link
        review_link=$(echo "$finalize_response" | grep -o '"reviewLink":"[^"]*"' | sed 's/"reviewLink":"//;s/"//')
        
        if [ -z "$review_link" ]; then
          echo "❌ No review link found in response"
          exit 1
        fi
        
        echo "🎬 Frame.io Review Link: $review_link"
        echo "REVIEW_LINK=$review_link" >> $GITHUB_ENV

    - name: Update Airtable Record
      run: |
        echo "📝 Updating Airtable record..."
        
        echo "✅ Updating with Frame.io link: $REVIEW_LINK"
        
        curl -X PATCH \
          "https://api.airtable.com/v0/$AIRTABLE_BASE_ID/$TABLE_NAME" \
          -H "Authorization: Bearer $AIRTABLE_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{
            \"records\": [
              {
                \"id\": \"${{ steps.params.outputs.record_id }}\",
                \"fields\": {
                  \"Low Quality Bit.ly Folder Link\": \"$REVIEW_LINK\"
                }
              }
            ]
          }"
        
        echo ""
        echo "✅ Airtable record updated successfully with Frame.io link"

    - name: Success Summary
      run: |
        echo ""
        echo "🎉 ========== PROCESSING COMPLETE! =========="
        echo "📁 Folder: ${{ steps.params.outputs.folder_url }}"
        echo "🆔 Record: ${{ steps.params.outputs.record_id }}"
        echo "🎬 Frame.io link: $REVIEW_LINK"
        echo "⏱️  Processing method: STABLE (5-min approach)"
        echo "🚀 Status: SUCCESS"
        echo "=============================================="
