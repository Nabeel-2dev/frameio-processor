name: Frame.io Processor

on:
  repository_dispatch:
    types: [process-folder]

jobs:
  process:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    env:
      AIRTABLE_TOKEN: "patB9bR2XxXnsI2Q1.ff4bacd9dd4231bd1a1e1d5a14c7a46fa703aae4089a712cbc2cbce259a99713"
      AIRTABLE_BASE_ID: "app6tQcsOfgwuSEUs"
      TABLE_NAME: "Result%20Folders"
    
    steps:
      - name: Process Frame.io Folder
        id: process
        run: |
          echo "üöÄ Starting Frame.io processing..."
          echo "Folder URL: ${{ github.event.client_payload.folderUrl }}"
          echo "Record ID: ${{ github.event.client_payload.recordId }}"
          echo "Script URL: ${{ github.event.client_payload.scriptUrl }}"
          
          # Function to call Google Apps Script with redirect handling
          call_script() {
            local action=$1
            local params=$2
            local script_url="${{ github.event.client_payload.scriptUrl }}"
            
            echo "üìû Calling: $action"
            
            # Make initial request (might get redirect)
            local response=$(curl -s -w "\n%{http_code}" "$script_url?action=$action$params")
            local body=$(echo "$response" | head -n -1)
            local status=$(echo "$response" | tail -n 1)
            
            if [[ $status == "302" ]] || [[ $body == *"Moved Temporarily"* ]]; then
              echo "üîÑ Handling redirect..."
              # Extract actual URL from HTML
              local actual_url=$(echo "$body" | grep -o 'HREF="[^"]*"' | sed 's/HREF="//;s/"//' | sed 's/&amp;/\&/g')
              if [[ -n "$actual_url" ]]; then
                echo "üìç Following redirect to: ${actual_url:0:100}..."
                response=$(curl -s "$actual_url")
                echo "$response"
              else
                echo "‚ùå Could not extract redirect URL"
                echo "$body"
                return 1
              fi
            else
              echo "$body"
            fi
          }
          
          # Step 1: Initialize folder
          echo "üìÅ Step 1: Initializing folder..."
          folder_url="${{ github.event.client_payload.folderUrl }}"
          # URL encode the folder URL
          encoded_url=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$folder_url', safe=''))")
          
          init_response=$(call_script "initFolder" "&folderUrl=$encoded_url")
          echo "Init response: $init_response"
          
          # Check if response contains error
          if echo "$init_response" | grep -q '"ok":false'; then
            error_msg=$(echo "$init_response" | grep -o '"error":"[^"]*"' | sed 's/"error":"//;s/"//')
            echo "‚ùå Init error: $error_msg"
            echo "result=error" >> $GITHUB_OUTPUT
            echo "error=Initialization failed: $error_msg" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if no files found
          if echo "$init_response" | grep -q '"files":\[\]'; then
            echo "‚ÑπÔ∏è No recent highlights/teaser files found"
            echo "result=no_files" >> $GITHUB_OUTPUT
            echo "message=No recent highlights or teaser files found" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract group ID and files info
          group_id=$(echo "$init_response" | grep -o '"groupId":"[^"]*"' | sed 's/"groupId":"//;s/"//')
          
          echo "‚úÖ Files found for processing"
          echo "üÜî Group ID: $group_id"
          
          # Extract asset IDs for upload
          asset_ids=$(echo "$init_response" | grep -o '"assetId":"[^"]*"' | sed 's/"assetId":"//;s/"//')
          
          # Step 2: Upload each file
          echo ""
          echo "üì§ Step 2: Starting uploads..."
          
          file_count=0
          total_files=$(echo "$asset_ids" | wc -l)
          
          for asset_id in $asset_ids; do
            file_count=$((file_count + 1))
            
            echo ""
            echo "üìÇ [$file_count/$total_files] Processing asset: $asset_id"
            
            completed=false
            attempts=0
            max_attempts=30
            
            while [ "$completed" = false ] && [ $attempts -lt $max_attempts ]; do
              attempts=$((attempts + 1))
              echo "  üîÑ Attempt $attempts/$max_attempts"
              
              # Call uploadAsset with 4 minute budget
              upload_response=$(call_script "uploadAsset" "&assetId=$asset_id&budget_ms=240000&window=2&pace_ms=200")
              
              # Check for errors
              if echo "$upload_response" | grep -q '"ok":false'; then
                error_msg=$(echo "$upload_response" | grep -o '"error":"[^"]*"' | sed 's/"error":"//;s/"//')
                echo "  ‚ùå Error: $error_msg"
                
                # Handle specific errors
                if [[ "$error_msg" == *"timeout"* ]] || [[ "$error_msg" == *"bandwidth"* ]] || [[ "$error_msg" == *"quota"* ]]; then
                  echo "  ‚è≥ Recoverable error, retrying in 3 seconds..."
                  sleep 3
                  continue
                fi
                
                if [ $attempts -lt 5 ]; then
                  echo "  üîÑ Early attempt, retrying..."
                  sleep 2
                  continue
                fi
                
                echo "‚ùå Upload failed after $attempts attempts: $error_msg"
                echo "result=error" >> $GITHUB_OUTPUT
                echo "error=Upload failed for asset $asset_id: $error_msg" >> $GITHUB_OUTPUT
                exit 1
              fi
              
              # Extract upload progress
              uploaded=$(echo "$upload_response" | grep -o '"uploaded":[0-9]*' | sed 's/"uploaded"://')
              total=$(echo "$upload_response" | grep -o '"totalChunks":[0-9]*' | sed 's/"totalChunks"://')
              paused=$(echo "$upload_response" | grep -o '"paused":[^,}]*' | sed 's/"paused"://')
              
              echo "  üìà Progress: $uploaded/$total chunks"
              
              if [ "$uploaded" = "$total" ] && [ "$uploaded" != "" ] && [ "$uploaded" != "0" ]; then
                echo "  ‚úÖ Asset $asset_id: Upload completed!"
                completed=true
              elif [ "$paused" = "true" ]; then
                echo "  ‚è∏Ô∏è Upload paused, resuming..."
                sleep 2
              else
                echo "  ‚è© Continuing upload..."
                sleep 1
              fi
            done
            
            if [ "$completed" = false ]; then
              echo "‚ùå Failed to upload asset $asset_id after $max_attempts attempts"
              echo "result=error" >> $GITHUB_OUTPUT
              echo "error=Upload failed for asset $asset_id after $max_attempts attempts" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
          
          # Step 3: Finalize and create review link
          echo ""
          echo "üîó Step 3: Creating Frame.io review link..."
          
          final_response=$(call_script "finalizeFolder" "&groupId=$group_id")
          
          if echo "$final_response" | grep -q '"ok":false'; then
            error_msg=$(echo "$final_response" | grep -o '"error":"[^"]*"' | sed 's/"error":"//;s/"//')
            echo "‚ùå Finalization failed: $error_msg"
            echo "result=error" >> $GITHUB_OUTPUT
            echo "error=Finalization failed: $error_msg" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          review_link=$(echo "$final_response" | grep -o '"reviewLink":"[^"]*"' | sed 's/"reviewLink":"//;s/"//')
          review_id=$(echo "$final_response" | grep -o '"reviewLinkId":"[^"]*"' | sed 's/"reviewLinkId":"//;s/"//')
          
          echo "üéâ Frame.io review link created: $review_link"
          echo "üÜî Review Link ID: $review_id"
          
          # Output results
          echo "result=success" >> $GITHUB_OUTPUT
          echo "review_link=$review_link" >> $GITHUB_OUTPUT
          echo "review_id=$review_id" >> $GITHUB_OUTPUT
          echo "files_processed=$total_files" >> $GITHUB_OUTPUT

      - name: Update Airtable Record
        if: always()
        run: |
          echo "üìù Updating Airtable record..."
          
          if [[ "${{ steps.process.outputs.result }}" == "success" ]]; then
            # Update with success
            echo "‚úÖ Updating with Frame.io link: ${{ steps.process.outputs.review_link }}"
            
            curl -X PATCH \
              "https://api.airtable.com/v0/$AIRTABLE_BASE_ID/$TABLE_NAME/${{ github.event.client_payload.recordId }}" \
              -H "Authorization: Bearer $AIRTABLE_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"fields\": {\"Low Quality Bit.ly Folder Link\": \"${{ steps.process.outputs.review_link }}\"}}"
            
            echo "‚úÖ Airtable record updated successfully with Frame.io link"
            
          elif [[ "${{ steps.process.outputs.result }}" == "no_files" ]]; then
            # Update with no files message
            echo "‚ÑπÔ∏è Updating with no files message"
            
            curl -X PATCH \
              "https://api.airtable.com/v0/$AIRTABLE_BASE_ID/$TABLE_NAME/${{ github.event.client_payload.recordId }}" \
              -H "Authorization: Bearer $AIRTABLE_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"fields\": {\"Low Quality Bit.ly Folder Link\": \"No recent highlights/teaser files found\"}}"
            
            echo "‚ÑπÔ∏è Airtable record updated with no files message"
            
          else
            # Update with error
            error_msg="${{ steps.process.outputs.error }}"
            echo "‚ùå Updating with error: $error_msg"
            
            curl -X PATCH \
              "https://api.airtable.com/v0/$AIRTABLE_BASE_ID/$TABLE_NAME/${{ github.event.client_payload.recordId }}" \
              -H "Authorization: Bearer $AIRTABLE_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"fields\": {\"Low Quality Bit.ly Folder Link\": \"Error: $error_msg\"}}"
            
            echo "‚ùå Airtable record updated with error message"
          fi

      - name: Workflow Summary
        if: always()
        run: |
          echo "## üìä Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Record ID**: ${{ github.event.client_payload.recordId }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Folder URL**: ${{ github.event.client_payload.folderUrl }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Result**: ${{ steps.process.outputs.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.process.outputs.result }}" == "success" ]]; then
            echo "- **Frame.io Link**: ${{ steps.process.outputs.review_link }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Files Processed**: ${{ steps.process.outputs.files_processed }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **Success!** Frame.io review link created and Airtable updated." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.process.outputs.result }}" == "no_files" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ÑπÔ∏è **No Files Found** - No recent highlights or teaser files in the folder." >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Error**: ${{ steps.process.outputs.error }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå **Failed** - Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
