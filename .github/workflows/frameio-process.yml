name: Frame.io Processor

on:
  repository_dispatch:
    types: [process-folder]

jobs:
  process:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Process Frame.io Folder
        id: process
        run: |
          echo "🚀 Starting Frame.io processing..."
          echo "Folder URL: ${{ github.event.client_payload.folderUrl }}"
          echo "Record ID: ${{ github.event.client_payload.recordId }}"
          echo "Script URL: ${{ github.event.client_payload.scriptUrl }}"
          
          # Function to call Google Apps Script with redirect handling
          call_script() {
            local action=$1
            local params=$2
            local script_url="${{ github.event.client_payload.scriptUrl }}"
            
            echo "📞 Calling: $action"
            
            # Make initial request (might get redirect)
            local response=$(curl -s -w "\n%{http_code}" "$script_url?action=$action$params")
            local body=$(echo "$response" | head -n -1)
            local status=$(echo "$response" | tail -n 1)
            
            if [[ $status == "302" ]] || [[ $body == *"Moved Temporarily"* ]]; then
              echo "🔄 Handling redirect..."
              # Extract actual URL from HTML
              local actual_url=$(echo "$body" | grep -o 'HREF="[^"]*"' | sed 's/HREF="//;s/"//' | sed 's/&amp;/\&/g')
              if [[ -n "$actual_url" ]]; then
                echo "📍 Following redirect to: ${actual_url:0:100}..."
                response=$(curl -s "$actual_url")
                echo "$response"
              else
                echo "❌ Could not extract redirect URL"
                return 1
              fi
            else
              echo "$body"
            fi
          }
          
          # Step 1: Initialize folder
          echo "📁 Step 1: Initializing folder..."
          folder_url="${{ github.event.client_payload.folderUrl }}"
          encoded_url=$(echo "$folder_url" | sed 's/&/%26/g;s/=/%3D/g;s/?/%3F/g')
          
          init_response=$(call_script "initFolder" "&folderUrl=$encoded_url")
          echo "Init response: $init_response"
          
          # Check if no files found
          if echo "$init_response" | jq -e '.files | length == 0' > /dev/null 2>&1; then
            echo "ℹ️ No recent highlights/teaser files found"
            echo "result=no_files" >> $GITHUB_OUTPUT
            echo "message=No recent highlights or teaser files found" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract group ID and files
          group_id=$(echo "$init_response" | jq -r '.groupId')
          files_count=$(echo "$init_response" | jq -r '.files | length')
          
          echo "✅ Found $files_count file(s) to process"
          echo "$init_response" | jq -r '.files[] | "  - \(.fileName) (\(.totalChunks) chunks, \(.fileSize/1024/1024 | floor) MB)"'
          echo "🆔 Group ID: $group_id"
          
          # Step 2: Upload each file
          echo ""
          echo "📤 Step 2: Starting uploads..."
          
          file_assets=$(echo "$init_response" | jq -r '.files[].assetId')
          file_count=0
          total_files=$(echo "$file_assets" | wc -l)
          
          for asset_id in $file_assets; do
            file_count=$((file_count + 1))
            file_name=$(echo "$init_response" | jq -r ".files[] | select(.assetId == \"$asset_id\") | .fileName")
            total_chunks=$(echo "$init_response" | jq -r ".files[] | select(.assetId == \"$asset_id\") | .totalChunks")
            
            echo ""
            echo "📂 [$file_count/$total_files] Processing: $file_name"
            echo "📊 Total chunks: $total_chunks"
            
            completed=false
            attempts=0
            max_attempts=50
            
            while [ "$completed" = false ] && [ $attempts -lt $max_attempts ]; do
              attempts=$((attempts + 1))
              echo "  🔄 Attempt $attempts/$max_attempts"
              
              # Call uploadAsset with 4.5 minute budget (since GitHub has 15 min total)
              upload_response=$(call_script "uploadAsset" "&assetId=$asset_id&budget_ms=270000&window=2&pace_ms=200")
              
              if echo "$upload_response" | jq -e '.ok == false' > /dev/null 2>&1; then
                error_msg=$(echo "$upload_response" | jq -r '.error // "Unknown error"')
                echo "  ❌ Error: $error_msg"
                
                # Handle specific errors
                if [[ "$error_msg" == *"timeout"* ]] || [[ "$error_msg" == *"bandwidth"* ]]; then
                  echo "  ⏳ Recoverable error, retrying..."
                  sleep 2
                  continue
                fi
                
                if [ $attempts -lt 5 ]; then
                  echo "  🔄 Early attempt, retrying..."
                  sleep 1
                  continue
                fi
                
                echo "❌ Upload failed after $attempts attempts: $error_msg"
                echo "result=error" >> $GITHUB_OUTPUT
                echo "error=Upload failed for $file_name: $error_msg" >> $GITHUB_OUTPUT
                exit 1
              fi
              
              uploaded=$(echo "$upload_response" | jq -r '.uploaded // 0')
              total=$(echo "$upload_response" | jq -r '.totalChunks // 0')
              paused=$(echo "$upload_response" | jq -r '.paused // false')
              
              echo "  📈 Progress: $uploaded/$total chunks"
              
              if [ "$uploaded" = "$total" ]; then
                echo "  ✅ $file_name: Upload completed!"
                completed=true
              elif [ "$paused" = "true" ]; then
                echo "  ⏸️ Upload paused, resuming..."
                sleep 1
              else
                echo "  ⏩ Continuing upload..."
                sleep 1
              fi
            done
            
            if [ "$completed" = false ]; then
              echo "❌ Failed to upload $file_name after $max_attempts attempts"
              echo "result=error" >> $GITHUB_OUTPUT
              echo "error=Upload failed for $file_name after $max_attempts attempts" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
          
          # Step 3: Finalize and create review link
          echo ""
          echo "🔗 Step 3: Creating Frame.io review link..."
          
          final_response=$(call_script "finalizeFolder" "&groupId=$group_id")
          
          if echo "$final_response" | jq -e '.ok == false' > /dev/null 2>&1; then
            error_msg=$(echo "$final_response" | jq -r '.error // "Unknown error"')
            echo "❌ Finalization failed: $error_msg"
            echo "result=error" >> $GITHUB_OUTPUT
            echo "error=Finalization failed: $error_msg" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          review_link=$(echo "$final_response" | jq -r '.reviewLink')
          review_id=$(echo "$final_response" | jq -r '.reviewLinkId')
          
          echo "🎉 Frame.io review link created: $review_link"
          echo "🆔 Review Link ID: $review_id"
          
          # Output results
          echo "result=success" >> $GITHUB_OUTPUT
          echo "review_link=$review_link" >> $GITHUB_OUTPUT
          echo "review_id=$review_id" >> $GITHUB_OUTPUT
          echo "files_processed=$files_count" >> $GITHUB_OUTPUT

      - name: Update Airtable Record
        if: always()
        run: |
          echo "📝 Updating Airtable record..."
          
          if [[ "${{ steps.process.outputs.result }}" == "success" ]]; then
            # Update with success
            echo "✅ Updating with Frame.io link: ${{ steps.process.outputs.review_link }}"
            
            curl -X PATCH \
              "https://api.airtable.com/v0/${{ secrets.AIRTABLE_BASE_ID }}/Result%20Folders/${{ github.event.client_payload.recordId }}" \
              -H "Authorization: Bearer ${{ secrets.AIRTABLE_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"fields\": {\"Low Quality Bit.ly Folder Link\": \"${{ steps.process.outputs.review_link }}\"}}"
            
            echo "✅ Airtable record updated successfully with Frame.io link"
            
          elif [[ "${{ steps.process.outputs.result }}" == "no_files" ]]; then
            # Update with no files message
            echo "ℹ️ Updating with no files message"
            
            curl -X PATCH \
              "https://api.airtable.com/v0/${{ secrets.AIRTABLE_BASE_ID }}/Result%20Folders/${{ github.event.client_payload.recordId }}" \
              -H "Authorization: Bearer ${{ secrets.AIRTABLE_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"fields\": {\"Low Quality Bit.ly Folder Link\": \"No recent highlights/teaser files found\"}}"
            
            echo "ℹ️ Airtable record updated with no files message"
            
          else
            # Update with error
            error_msg="${{ steps.process.outputs.error }}"
            echo "❌ Updating with error: $error_msg"
            
            curl -X PATCH \
              "https://api.airtable.com/v0/${{ secrets.AIRTABLE_BASE_ID }}/Result%20Folders/${{ github.event.client_payload.recordId }}" \
              -H "Authorization: Bearer ${{ secrets.AIRTABLE_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"fields\": {\"Low Quality Bit.ly Folder Link\": \"Error: $error_msg\"}}"
            
            echo "❌ Airtable record updated with error message"
          fi

      - name: Workflow Summary
        if: always()
        run: |
          echo "## 📊 Processing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Record ID**: ${{ github.event.client_payload.recordId }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Folder URL**: ${{ github.event.client_payload.folderUrl }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Result**: ${{ steps.process.outputs.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.process.outputs.result }}" == "success" ]]; then
            echo "- **Frame.io Link**: ${{ steps.process.outputs.review_link }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Files Processed**: ${{ steps.process.outputs.files_processed }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Success!** Frame.io review link created and Airtable updated." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.process.outputs.result }}" == "no_files" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ **No Files Found** - No recent highlights or teaser files in the folder." >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Error**: ${{ steps.process.outputs.error }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Failed** - Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
